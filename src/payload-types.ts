/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    topics: Topic;
    quotes: Quote;
    cards: Card;
    cities: City;
    supportGroups: SupportGroup;
    supportGroupEvents: SupportGroupEvent;
    locations: Location;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    cities: {
      supportGroups: 'supportGroups';
    };
    supportGroups: {
      events: 'supportGroupEvents';
    };
    locations: {
      supportGroups: 'supportGroups';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    topics: TopicsSelect<false> | TopicsSelect<true>;
    quotes: QuotesSelect<false> | QuotesSelect<true>;
    cards: CardsSelect<false> | CardsSelect<true>;
    cities: CitiesSelect<false> | CitiesSelect<true>;
    supportGroups: SupportGroupsSelect<false> | SupportGroupsSelect<true>;
    supportGroupEvents: SupportGroupEventsSelect<false> | SupportGroupEventsSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    fallbackPublications: FallbackPublication;
    cardSet: CardSet;
  };
  globalsSelect: {
    fallbackPublications: FallbackPublicationsSelect<false> | FallbackPublicationsSelect<true>;
    cardSet: CardSetSelect<false> | CardSetSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics".
 */
export interface Topic {
  id: number;
  body: string;
  annualDate?: DateStruct;
  /**
   * От нуля и выше. В первый день чистоты достигнуто ноль дней.
   */
  daysReached?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Каждый год в эту дату участник будет видеть эту публикацию, если для него нет публикации по достигнутым дням
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DateStruct".
 */
export interface DateStruct {
  day?: number | null;
  month?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quotes".
 */
export interface Quote {
  id: number;
  body: string;
  source: string;
  annualDate?: DateStruct;
  /**
   * От нуля и выше. В первый день чистоты достигнуто ноль дней.
   */
  daysReached?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cards".
 */
export interface Card {
  id: number;
  title: string;
  body: string;
  backgroundColor: string;
  textColor: string;
  /**
   * Если рамка не нужна, скопируйте сюда цвет фона
   */
  borderColor: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities".
 */
export interface City {
  id: number;
  idString?: string | null;
  name: string;
  timezone: string;
  phoneNumber: string;
  phoneNumberDescription: string;
  supportGroups?: {
    docs?: (number | SupportGroup)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportGroups".
 */
export interface SupportGroup {
  id: number;
  _supportGroups_supportGroups_order?: string | null;
  name: string;
  location: number | Location;
  city?: (number | null) | City;
  events?: {
    docs?: (number | SupportGroupEvent)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: number;
  city: number | City;
  street: string;
  house: string;
  apartmentOrOffice?: string | null;
  entrance?: string | null;
  floor?: string | null;
  intercomCode?: string | null;
  comment?: string | null;
  supportGroups?: {
    docs?: (number | SupportGroup)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportGroupEvents".
 */
export interface SupportGroupEvent {
  id: number;
  supportGroup: number | SupportGroup;
  day: number;
  start: TimeStruct;
  duration: number;
  sequence: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimeStruct".
 */
export interface TimeStruct {
  hour: number;
  minute: number;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'topics';
        value: number | Topic;
      } | null)
    | ({
        relationTo: 'quotes';
        value: number | Quote;
      } | null)
    | ({
        relationTo: 'cards';
        value: number | Card;
      } | null)
    | ({
        relationTo: 'cities';
        value: number | City;
      } | null)
    | ({
        relationTo: 'supportGroups';
        value: number | SupportGroup;
      } | null)
    | ({
        relationTo: 'supportGroupEvents';
        value: number | SupportGroupEvent;
      } | null)
    | ({
        relationTo: 'locations';
        value: number | Location;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics_select".
 */
export interface TopicsSelect<T extends boolean = true> {
  body?: T;
  annualDate?: T | DateStructSelect<T>;
  daysReached?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DateStruct_select".
 */
export interface DateStructSelect<T extends boolean = true> {
  day?: T;
  month?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quotes_select".
 */
export interface QuotesSelect<T extends boolean = true> {
  body?: T;
  source?: T;
  annualDate?: T | DateStructSelect<T>;
  daysReached?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cards_select".
 */
export interface CardsSelect<T extends boolean = true> {
  title?: T;
  body?: T;
  backgroundColor?: T;
  textColor?: T;
  borderColor?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities_select".
 */
export interface CitiesSelect<T extends boolean = true> {
  idString?: T;
  name?: T;
  timezone?: T;
  phoneNumber?: T;
  phoneNumberDescription?: T;
  supportGroups?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportGroups_select".
 */
export interface SupportGroupsSelect<T extends boolean = true> {
  _supportGroups_supportGroups_order?: T;
  name?: T;
  location?: T;
  city?: T;
  events?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportGroupEvents_select".
 */
export interface SupportGroupEventsSelect<T extends boolean = true> {
  supportGroup?: T;
  day?: T;
  start?: T | TimeStructSelect<T>;
  duration?: T;
  sequence?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimeStruct_select".
 */
export interface TimeStructSelect<T extends boolean = true> {
  hour?: T;
  minute?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  city?: T;
  street?: T;
  house?: T;
  apartmentOrOffice?: T;
  entrance?: T;
  floor?: T;
  intercomCode?: T;
  comment?: T;
  supportGroups?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Эти публикации будут показаны пользователю в такой день, когда ни по достигнутым дням, ни по ежегодной дате в базе данных не будет найдено ни одной публикации.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fallbackPublications".
 */
export interface FallbackPublication {
  id: number;
  quote?: (number | null) | Quote;
  topic?: (number | null) | Topic;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Эти карточки будут показаны пользователям в заданном порядке.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cardSet".
 */
export interface CardSet {
  id: number;
  cards?: (number | Card)[] | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fallbackPublications_select".
 */
export interface FallbackPublicationsSelect<T extends boolean = true> {
  quote?: T;
  topic?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cardSet_select".
 */
export interface CardSetSelect<T extends boolean = true> {
  cards?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}